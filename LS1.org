# # -*- mode: org -*- coding: utf-8 -*-
#+TITLE: 
#+AUTHOR:
#+EMAIL: 
#+DATE: 
#+LANGUAGE:  en
# #+INFOJS_OPT: view:showall ltoc:t mouse:underline
#+HTML_HEAD: <link rel="stylesheet" href="./tufte.css" type="text/css">
#+HTML_HEAD: <link rel="stylesheet" href=".//ox-tufte.css" type="text/css">
#+HTML_HEAD_EXTRA: <style>
#+HTML_HEAD_EXTRA: article > div.org-src-container {
#+HTML_HEAD_EXTRA:     width: var(--ox-tufte-content-width);
#+HTML_HEAD_EXTRA:     max-width: var(--ox-tufte-content-width);
#+HTML_HEAD_EXTRA:     clear: none;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: article > section .org-src-container {
#+HTML_HEAD_EXTRA:     width: var(--ox-tufte-src-code-width);
#+HTML_HEAD_EXTRA:     max-width: var(--ox-tufte-src-code-width);
#+HTML_HEAD_EXTRA:     clear: none;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: div.org-src-container > pre { clear: none; }
#+HTML_HEAD_EXTRA: pre.example {clear: none; }
#+HTML_HEAD_EXTRA: </style>
#+INCLUDE: "./header.org" :minlevel 1
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_FILE_NAME: LittleSchemer1.html
#+OPTIONS: H:15 num:nil toc:nil \n:nil @:t ::t |:t _:{} *:t ^:{} prop:nil
#+OPTIONS: tex:t
#+OPTIONS: html-postamble:nil
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [american]
# Setup tikz package for both LaTeX and HTML export:
#+LATEX_HEADER: \usepackqqqage{tikz}
#+LATEX_HEADER: \usepackage{commath}
#+LaTeX_HEADER: \usepackage{pgfplots}
#+LaTeX_HEADER: \usepackage{sansmath}
#+LaTeX_HEADER: \usepackage{mathtools}
#+PROPERTY: header-args:latex+ :packages '(("" "tikz"))
#
#+PROPERTY: header-args:latex+ :exports results :fit yes
#
#+STARTUP: showall
#+STARTUP: align
#+STARTUP: indent
#+STARTUP: shrink
# This makes MathJax/LaTeX appear in buffer (UTF-8)
#+STARTUP: entitiespretty
# #+STARTUP: logdrawer # This makes pictures appear in buffer
#+STARTUP: inlineimages
#+STARTUP: fnadjust
# #+OPTIONS: html-style:nil
#+html_head_extra: <style> .title { display: none; } </style>
#+html_head_extra: <style> caption.t-bottom { caption-side: bottom; } </style>

* Little Schemer 1

#+begin_figure
#+CAPTION: The Little Schemer putting together a combinator.
[[file:images/LittleSchemerElephant1.png]]
#+end_figure


** Bibliography :noexport:
:PROPERTIES:
:header-args: :dir "/home/galaxybeing/Dropbox/org/codeismathiscode2"
:END:
:RESOURCES:
- [[bibliography:~/Dropbox/org/biblio/ref.bib][Bibliography]]
- [[cite:&friedman1995little]]
:END:


* 

** Why /The Little Schemer/?

/[[https://mitpress.mit.edu/9780262560993/the-little-schemer/][The Little Schemer]]/ (TLS), written by computer science professors
Daniel P. Friedman and Matthias Felleisen, was a revolutionary book
when it came out in its first edition in 1987 as /The Little Lisper/
based on the programming language [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp]]. Subsequent editions switched
to Lisp's younger sister language Scheme. It was so unique because it
followed a "[[https://en.wikipedia.org/wiki/Socratic_method][Socratic]]" dialog style of question and answer in left and
right columns throughout the book. Below is from the very first page
of the first chapter entitled /1. Toys/![fn:1]

#+HTML_HEAD: <style type="text/css">
#+HTML_HEAD: .styledtab col:nth-of-type(1) { width:  45%; }
#+HTML_HEAD: .styledtab col:nth-of-type(2) { width: 55%; }
#+HTML_HEAD: </style>

#+NAME: LSTable2
#+ATTR_HTML: :class fullwidth
#+ATTR_HTML: :class styledtab
|----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Βιγ Σξηεμερ                                        | Λιττλε Σξηεμερ                                                                                                                              |
|----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Is it true that this is an /atom/? ~atom1~         | Yes, because ~atom1~ is a string of characters beginning with the letter ~a~.                                                               |
|                                                    |                                                                                                                                             |
|----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Is it true that this is an /atom/? ~turkey~        | Yes, because ~turkey~ is a string of characters beginning with a letter.                                                                    |
|                                                    |                                                                                                                                             |
|----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Is it true that this is an /atom/? ~1492~          | Yes, because ~1492~ is a string of digits.                                                                                                  |
|                                                    |                                                                                                                                             |
|----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Is it true that this is an /atom/? ~*abc$~         | Yes, because ~*abc$~ is a string of characters beginning with a letter or special character other than a left ~(~ or right ~)~ parenthesis. |
|                                                    |                                                                                                                                             |
|----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Is it true that this is a /list/? ~(atom)~         | Yes, because ~(atom)~ is an atom enclosed by parentheses.                                                                                   |
|                                                    |                                                                                                                                             |
|----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Is it true that this is a list? ~(atom turkey or)~ | Yes, because it is a collection of atoms [separated by spaces and] enclosed by parentheses.                                                 |
|                                                    |                                                                                                                                             |

This chatty conversation style is teasing out the requisite
/formalism/ [fn:2] where you the reader will hopefully experience a
growing mental picture of the important theory and language syntax as
the conversation continues and the pages turn. We are in effect
/backing into/ Scheme programming and its underlying philosophy---and
underlying is quite a bit of important computer science.[fn:3]

Some things, however, are directly stated. Before /1. Toys/, even
before the title page, there are listed (jokingly named?) /The Ten
Commandments/, followed by /The Five Rules/. Again, this is a nod to
the mathematical formalism of an /[[https://en.wikipedia.org/wiki/Axiomatic_system][axiomatic system]]/. Now, what do we
mean by an axiomatic system and why are they important?

The multi-volume set [[https://en.wikipedia.org/wiki/Euclidean_geometry#Axioms][Euclid's Elements]] (EE) from ca. 300 BC Greece is
generally accepted as being the first example of mathematics built on
axioms and pursued through proofs based on those axioms ... and EE has
been in the Western world's math curricula ever since. It was once a
staple of high school math, /though often dreaded/, as it was the
student's first exposure to the strange idea of /proving/ math instead
of just doing math. Proving something in math requires a deep grasp of
a topic, which is completely different from the typical style of "when
you see this, do this" behavior conditioning. Starting with [[https://en.wikipedia.org/wiki/Euclidean_geometry#Axioms][Euclidean
Geometry]], the student is asked to see a geometric situation[fn:4] and
understand why something about it is /necessarily/ (proven to be)
true. The proof of, e.g., the /pons asinorum/ is a step-by-step
establishing of undeniable facts based on Euclid's axioms, his
/Postulates/ and /Notions/. Again, this was the beginning of modern
mathematics where a set of axioms could be called on to build
/theorems/, i.e., additional true things about the situation. Here's
Kenneth Rosen from his widely-used /[[https://www.mheducation.com/highered/product/Discrete-Mathematics-and-Its-Applications-Rosen.html][Discrete Mathematics and Its
Applications]]/

#+begin_quote
To understand mathematics, we must understand what makes up a correct
mathematical argument, that is, a *proof*. Once we prove a
mathematical statement is true, we call it a *theorem*. A collection
of theorems on a topic organize what we know about this topic.
#+end_quote

[[https://en.wikipedia.org/wiki/Axiomatic_system][Axioms]]
can go by many names, e.g., basic truths, givens, primitives. Here are
Euclid's *Five Postulates*


- P1 :: A straight line may be drawn between any two points.
- P2 :: Any terminated straight line may be extended indefinitely.
- P3 :: A circle may be drawn with any given point as center and any
  given radius.
- P4 :: All right angles are equal.
- P5 :: Through a given point $P$ not on a line $L$, there is one and
  only one line in the plane of $P$ and $L$ which does not meet $L$.

The last postulate is a more modern rewording of the original, meaning
/truly parallel lines may exist that never cross/. To these first
five, Euclid added another five basic truths, his *Common Notions*

- N1 :: Things which are equal to the same thing are also equal to
  each other.
- N2 :: If equals are added to equals, the wholes (results) are equal.
- N3 :: If equals are subtracted from equals, the remainders are equal.
- N4 :: Things which coincide with one another are equal to one another.
- N5 :: The whole is greater than a part of the whole.

With these ten axiomatic statements begins much geometry, logic,
number and set theory. That is to say, great amounts of /[[https://en.wikipedia.org/wiki/Propositional_calculus#Inference_rules][implication]]/,
"if this then that" can be derived from these ten accepted
givens.[fn:5] For example, the last notion, N5, seems to say something
almost silly and trivial. But as [[http://aleph0.clarku.edu/~djoyce/elements/bookI/cn.html][this treatment]] explains, N5 with its
odd wording starts whith the basic concept of one thing being /larger/
than another, i.e., $A>B$. Here's David E. Joyce's, professor of
mathematics at Clark University, explanation

#+begin_quote
To say one magnitude $B$ is a *part* of another $A$ could be taken as
saying that $A$ is the sum of $B$ and $C$ for some third magnitude
$C$, the remainder. Symbolically, $A > B$ means that there is some $C$
such that $A = B + C$.
#+end_quote

Again, to the novice this may look like nit-picking, but real math
comes from having these basic foundational givens---upon which new,
useful math is solidly, logically built. Higher math[fn:6] is the
realm of axiomatic math where proofs of /theorems/ are the
staple. Higher math is where the student becomes a real mathematician
who looks under the hood and learns what makes things really tick.

Let's consider a more serious-looking set of axioms, again, taken from
course material by Professor Joyce, then a proof of a theorem based,
i.e., relying on these axioms[fn:7]

1. Vector addition is /commutative/: $\mathbf{v} + \mathbf{w} = \mathbf{w} + \mathbf{v}$.
2. Vector addition is /associative/: $(\mathbf{u} + \mathbf{v}) + \mathbf{w} = \mathbf{u} + (\mathbf{v} + \mathbf{w})$.
3. There is a vector, denoted $\mathbf{0}$ such that $\mathbf{v} + \mathbf{0} = \mathbf{v} = \mathbf{0} + \mathbf{v}$.
4. For each $\mathbf{v}$, there is another vector $\mathbf{−v}$ such that $\mathbf{v} + (\mathbf{−v}) =
   0$.
5. Scalar multiplication /distributes/ over vector addition: $c(\mathbf{v} + \mathbf{w}) =
   c\mathbf{v} + c\mathbf{w}$.
6. Scalar multiplication /distributes/ over real addition: $(c + d)\mathbf{v} = c\mathbf{v} + d\mathbf{v}$
7. Multiplication and scalar multiplication /associate/: $c(d\mathbf{v}) =
   (cd)\mathbf{v}$.
8. The number $1$ acts as /identity/ for scalar multiplication: $1\mathbf{v}
   = \mathbf{v}$.

And now we'll prove a very basic theorem relying on these axiom truths

@@html:<font color = "#650d1c">@@
Theorem: $0\mathbf{v} = 0$
@@html:</font>@@

...or zero times a vector $\mathbf{v}$ is zero.

⌜\\
@@html:<font color = "#650d1c">@@Proof: @@html:</font>@@ Since $0 + 0
= 0$, therefore we can say $(0 + 0)\mathbf{v} = 0\mathbf{v}$. By axiom *6*, that implies
$0\mathbf{v} + 0\mathbf{v} = 0\mathbf{v}$. If we could subtract $0\mathbf{v}$ from each side, we’d be
done, but subtraction isn’t yet defined. Still, we can add the
negation of $0v$ to each side which should accomplish about the same
thing. Thus,

\begin{align*}
(0\mathbf{v} + 0\mathbf{v}) + (−0\mathbf{v}) = 0\mathbf{v} + (−0\mathbf{v}).
\end{align*}

Next, we can associate the parentheses differently by axiom *2* to get

\begin{align*}
0\mathbf{v} + (0\mathbf{v} + (−0\mathbf{v})) = 0\mathbf{v} + (−0\mathbf{v}).
\end{align*}

That equation simplifies by axiom *4* to $0\mathbf{v} + 0 = 0$, and by
axiom *3*, that further simplifies to $0\mathbf{v} = 0$ which is what
was to be proved. *Q.E.D.*[fn:8] \\
⌟

Got it? No worries (yet) if you didn't. The point is to understand
that this so-call higher math thing wants to be built exclusively on
axioms. But yes, this is a strange world for the beginner so used to
the usual "get stuff calculated" math. For example, in beginner
algebra we never needed to /show/ with a proof that an entity times
zero is zero. So yes, here we have a thorough /proof/ of something
that we normally would have taken for granted. But again, this is the
world of higher math where math becomes more of a philosophy than just
a set of tools.[fn:9]

** Axiomatic Scheme

And now with no further ado we will list out TLS's version of
"axiomatic givens" starting with /The Ten Commandments/

- *First Commandment*: When recurring on a list of atoms, ~lat~, ask two
  questions about it ~(null? lat)~ and ~else~; when recurring on a
  number, ~n~, ask two questions about it: ~(zero? n)~ and ~else~;
  when recurring on a list of S-expressions, ~l~, ask three question
  about it: ~(null?  l)~, ~(atom? ( car l))~, and ~else~.
- *Second Commandment*: Use ~cons~ to build lists.
- *Third Commandment*: When building a list, describe the first typical
  element, and then ~cons~ it onto the natural recursion.
- *Fourth Commandment*: Always change at least one argument while
  recurring. When recurring on a list of atoms, ~lat~, use ~(cdr
  lat)~. When recurring on a number, ~n~, use ~(sub1 n)~. And when
  recurring on a list of S-expressions, ~l~, use ~(car l)~ and ~(cdr
  l)~ if neither ~(null? l)~ nor ~(atom? (car l))~ are true. [One
  argument] must be changed to be closer to termination. The changing
  argument must be tested in the termination condition: When using
  ~cdr~, test termination with ~null?~ and when using ~sub1~, test
  termination with ~zero?~.
- *Fifth Commandment*: When building a value with $+$, always use $0$
  for the value of the terminating line, for adding $0$ does not
  change the value of an addition.
- *Sixth Commandment*: Simplify only after the function is correct.
- *Seventh Commandment*: Recur on the /subparts/ that are of the same
  nature: on the sublists of a list; on the subexpressions of an
  arithmetic expression.
- *Eighth Commandment*: Use help functions to abstract from
  representations.
- *Ninth Commandment*: Abstract common patterns with a new function.
- *Tenth Commandment*: Build functions to collect more than one value at
  a time.

But wait there's more. Next are the /The Five Rules/

- *The Law of ~car~*: The primitive ~car~ is defined only for nonempty
  lists.
- *The Law of ~cdr~*: The primitive ~cdr~ is defined only for nonempty
  lists. The ~cdr~ of any nonempty list is always another list.
- *The Law of ~cons~*: The primitive ~cons~ takes two arguments. The
  second argument to ~cons~ must be a list. The result is a list.
- *The Law of ~null?~*: The primitive ~null?~ is defined only for lists.
- *The Law of ~eq?~*: The primitive ~eq?~ takes two arguments. Each must
  be a non-numeric atom.

Not many beginners can take these fifteen would-be axioms and know
exactly how to write a Scheme program.[fn:10] But then if you've read
and understood a textbook such as /[[https://cseweb.ucsd.edu/~gill/BWLectSite/Resources/LDGbookCOV.pdf][Lists, Decisions and Graphs...]]/ by
Edward Bender and S. Gill Williamson, you might catch on that these
"fake" axioms are attempting is to establish some sort of
omnibus[fn:11] /list processing/ machinery. In fact Scheme's
predecessor, *Lisp*, is an acronym for "list processing," because this
is essentially what Lisp and Scheme do, i.e., they do computing tasks
with, on lists. Really?! So in Lisp and Scheme we have a complete
working programming language as just a bunch of lists stored in a
computer file that some sort of evaluator processes and gives results?
How does that work? Read on.

** List basics

At this point we take a theoretical look at what a list is, as the
humble list is the most basic data structure in programming. But then
we all know in the everyday sense what a list is, right? A grocery
list is a good example

- eggs
- milk
- flour
- potatoes
- butter

But we have a problem---at least with the math world. That's because
in higher math there are also *sets*. So what is the difference
between a list and a set? To the layman they might seem
interchangeable. /[[https://en.wikipedia.org/wiki/Set_theory][Set theory]]/ is the fundamental starting point of
higher math, as well as CS's Discrete Math.[fn:12] And so many books
on set theory and discrete math start out with the deceptively simple
and informal statement

#+begin_quote
@@html:<font color = "#0d3db3"> <i>@@ A *set* is collections of
things ... objects ... stuff. @@html:</font> </i>@@
#+end_quote

...which is kind of what a list is too. But to CS and higher math they
are two different entities. What's the difference? First, our grocery
/list/ is not technically a list because, again, in the CS/higher math
world,@@html:<font color = "#0d3db3">@@ /the *elements* (members) of
a list have a specific order/ @@html:</font>@@. But then our grocery
list above could be in any order, doesn't really matter as long as you
come home with the those groceries...

Plainly put, lists are defined as a collection of things in a specific
order. Think of a /string/ of letters like you're reading right now. A
string of alphanumeric characters can be considered a list because
/the order of the individual alphanumeric characters (and spaces in
between) is everything/. We typically call strings of letters and
spaces /sentences/ ... where all the sentences in English are made up
of differing combinations of the twenty-six letters (times two if we
have both upper- and lower-case), as well as the ten numerals, all the
punctuation, and the space character. You can't be placing individual
characters in any order and still have sensible sentences. So is our
"grocery list" really a /set/ of groceries?

Actually no. We should not call a grocery list a /set of groceries/
either because even though order doesn't matter, sets allow
duplicates. They do. In set theory there is the idea of the
/[[https://en.wikipedia.org/wiki/Cardinality][cardinality]]/ of a set, i.e., what is the count of the /unique/
elements of the set, /not/ counting duplicates.[fn:13]

𝖟𝕭: The set $A = \{1,1,1,2,2\}$ is /identical/ to set $B = \{1, 2\}$
because they have the same cardinality, or $|\,A\,| = |\,B\,| =
2$.[fn:14]

This can be explained in a few ways. The simplest is to say the
members, the elements of a set /belong/ to that set. So for example,
if I /belong/ to a club, it doesn't make sense to have me
/belong-belong/ or belong twice to the club.[fn:15] In the example
above, $1$ /belongs/ to $A$, so it doesn't need to belong again.

Splitting hairs? Yes, well, set theory is a very fundamental thing in
higher math, thus, very precisely defined based on axioms. For
example, set theory has the /[[https://en.wikipedia.org/wiki/Axiom_of_extensionality][Axiom of Extensionality]]/ which states
@@html:<font color = "#0d3db3">@@ two sets are equal if they both have
the same members@@html:</font>@@. In our example $A$ and $B$ do indeed
have the same members, namely, $1$ and $2$ ---and it doesn't matter,
it doesn't count that $A$ repeats these members. Let's look at another
example

𝖟𝕭: Given the *set* $A = \{\text{good, so-so, bad}\}$ and a defined
(named) *list*

#+name: 7f8774e8-5919-413d-8134-dfd3652d7b39
#+begin_src scheme :eval never :exports code
(define week3 '(bad so-so so-so so-so good))
#+end_src

\\
the set $A$ contains the three possible moods a person might be in;
while ~week3~ is the name we've told Scheme to call a list containing
our daily workweek moods.[fn:16] \\

The order of set $A$ doesn't matter (and we'd ignore, say, a second
$good$), but the order of the list defined as ~week3~ is important
because we don't want to mix up how we felt on what day. Also, it
makes perfect sense for a list to have "repeats" since we're
evaluating many days in succession, and each day can be one of the
three choices. But then notice one more thing about a set: When we
built the list ~week3~ we had to choose for each day good /or/ bad
/or/ so-so. Or did we? What would the list ~week3~ look like if we
could have more than just one mood during a day? How about

#+name: 5e0271e8-a0e4-430f-b594-f11e30c11403
#+begin_src scheme :eval never :exports code
(define week3 '(bad bad so-so (good so-so bad) (good so-so)))
#+end_src

Remember Venn diagrams from pre-school/Kindergarten? An /or/ situation
can be shown with a /[[https://en.wikipedia.org/wiki/Union_(set_theory)][union]]/ of circles.[fn:17] Let's make a formal
definition of a union:[fn:18]

@@html:<font color = "#0d3db3">@@ The union of two sets $A$ and $B$
(denoted by $A \cup B$) is the set of elements which are in $A$, in $B$,
*or* in both $A$ and $B$.  @@html:</font>@@[fn:19]

Now, for our set $A = \{\text{good, so-so, bad}\}$, if we are using
each element just once per the day slot of ~week3~ we could imagine
$A$ as made up of the individual sets

\begin{align*}
A_G &= \{\text{good}\} \\
A_{S} &= \{\text{so-so}\} \\
A_B &= \{\text{bad}\}
\end{align*}

and so a union $\{A_G \cup A_{S} \cup A_B \}$ will get us back to our original
$A = \{\text{good, so-so, bad}\}$. $A_G$, $A_{S}$, and $A_B$ are
/[[https://en.wikipedia.org/wiki/Disjoint_sets][disjoint sets]]/ since they have no elements in common when we
union-ize them. And so if we made a Venn diagram, there would be no
overlap between any of them. Why are we couching our mood choices in
the language of set theory? Because we will eventually move on to
another language, namely, [[https://en.wikipedia.org/wiki/Haskell][Haskell]], where a certain class of data types
emulate just this sort of *[[https://en.wikipedia.org/wiki/Logical_disjunction][logical or]]*, i.e., the *sum type*. While
Scheme is usually not directly explained in terms of higher math, the
Haskell family of languages (Haskell, [[https://en.wikipedia.org/wiki/Standard_ML][Standard ML]], [[https://en.wikipedia.org/wiki/OCaml][OCaml]], [[https://en.wikipedia.org/wiki/F_Sharp_(programming_language)][F#]])
are. Again, lots more about data representations of disjoint sets,
logical conjunction and disjunction when we look into Haskell in the
future.

𝖟𝕭: Consider three common alphabets as sets---the Greek, Latin, and
Cyrillic alphabets

\begin{align*}
G &= \{Α, Β, Γ, Δ, Ε, Ζ, Η, Θ, Ι, Κ, Λ, Μ, Ν, Ξ, Ο, Π, Ρ, Σ, Τ, Υ, Φ, Χ, Ψ, Ω\} \\
L &= \{A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z\} \\
C &= \{A, Б, В, Г, Д, E, Ё, Ж, З, И, Й, K, Л, М, Н, О, П, Р, С, Т, У, Ф, Х, Ц, Ч, Ш, Ъ, \\
&  Ы, Ь, Э, Ю, Я\}
\end{align*}

Now, let's make one big union-ed together set $A$ out of the
individual sets $G$, $L$, and $C$

\begin{align*}
A &= \{ Α, Β, Γ, Δ, Ε, Ζ, Η, Θ, Ι, Κ, Λ, Μ, Ν, Ξ, Ο, Π, Ρ, Σ, Τ, Υ, \\
& Φ, Χ, Ψ, Ω, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, \\
& S, T, U,  V, W, X, Y, Z, A, Б, В, Г, Д, E, Ё, Ж, З, И, Й, K, Л, М, Н, \\
& О, П, Р, С, Т, У, Ф, Х, Ц, Ч, Ш, Ъ, Ы, Ь, Э, Ю, Я\}
\end{align*}

Below we see a Venn diagram for $A$, i.e., circles in which the
/three/ sets of alphabetic characters are contained. We can see how
the intersecting circumference lines also show the what /any two/
alphabets share, and then in the very center what they /all/ share

#+begin_figure
#+CAPTION: Three alphabets, their /union/ and /intersections/ (Wikipedia [[https://en.wikipedia.org/wiki/Venn_diagram][Venn diagram]])
[[file:images/Venn_diagram_gr_la_ru.png]]
#+end_figure

Of course for visual purposes not /all/ the letters could be crowded
into the diagram above, but we can see how the Venn diagram with its
overlapping circles trick is beating duplicates. Visually we can see
this happening, but is there a formal explanation? Short answer: yes.

Now let's look at a formal definition of union in so-called
/set-builder notation/[fn:20]

\begin{align}
A \cup B = \{x : x \in A \lor x \in B  \}
\end{align}

This expression says the *union* of $A$ and $B$ equals the set of
elements denoted by $x$ such that an $x$ can be an element from[fn:21]
$A$ *or* an element from $B$.[fn:22] But wait, *or* doesn't quite
sound right in English if we mean to union-ize two or more things,
does it?  To bring two or more sets together as one---their unique and
shared element alike---don't we mean to say, e.g., @@html:<font color
= "#0d3db3">@@ /the union of $A$ and $B$ takes all the elements from
both $A$ *and* $B$/?@@html:</font>@@ Yes, but set theory prefers to
look at, e.g., the Venn diagram of the alphabets (Figure 2 above) and
say, @@html:<font color = "#0d3db3">@@A letter /belongs/ to the union
of alphabets if it is from the Greek *or* from the Latin *or* from the
Cyrillic alphabets.@@html:</font>@@ Again, we have the idea of sets
and /belonging/ to sets.

Now, look at that bulging middle triangle region of Figure 2
containing the letters all three alphabets have in common. This is the
/[[https://en.wikipedia.org/wiki/Intersection_(set_theory)][intersection]]/ of alphabet sets $G$, $L$, and $C$. In this case we
would say: @@html:<font color = "#0d3db3">@@A letter /belongs/ to the
center triangle (the intersection) if it belongs to $G$ *and* it
belongs to $L$ *and* it belongs to $C$@@html:</font>@@. In other
words, the letter has to belong to all three alphabets. This is more
precise, something upon which higher math always insists.

@@html:<label for="mn-demo" class="margin-toggle"></label>
<input type="checkbox" id="mn-demo" class="margin-toggle">
<span class="marginnote">@@
[[file:images/On_Off.jpg]]
\\
@@html:</span>@@

And with one final piece of the puzzle we can put to rest this whole
duplicates within sets issue. Let's explore another logic concept that
we actually encounter every day. In the modern world we're constantly
turning things on and off, e.g., a light switch with its on-off
toggle. But occasionally we see /two/ buttons---/one/ for on, /one/
for off. In the image to the right we have /two/ buttons doing on and
off instead of one. In such a case pushing the green /on/ button just
one initial time turns the device on /and any additional pushing is
disregarded/. This is the same for the red /off/ button. Push once for
off---and any further pushes mean nothing. Basically, "I heard you the
first time, you don't have to repeat yourself." This phenomenon has an
official name: /[[https://en.wikipedia.org/wiki/Idempotence][idempotence]]/, and it crops up in many real-life
places. For our set theory discussion imagine making a Venn diagram of
the union of sets $S_1 = \{5\}$ and $S_2 = \{5\}$, i.e., two different
sets containing the same single element. Wouldn't this union be just
one single circle containing the element $5$? Indeed it would. And if
we added another set $S_3 = \{5\}$ to the union, we would still have

\begin{align*}
S_1 \cup S_2 \cup S_3 = \{5\}
\end{align*}

i.e., just one circle representing $5$. In fact, we could union
together an infinite amount of /singleton/[fn:23] sets of the form $S_n =
\{5\}$ and they would produce the singleton set $\{5\}$. Now for a bit
of abstraction. Consider a /[[https://en.wikipedia.org/wiki/Binary_operation][binary operator]]/, i.e., anything that
takes two objects and does an operation on them to produce something
new. For example, addition is a binary operation, $1 + 1$ is $2$, as
is multiplication, $3 \cdot 5$ is $15$. Let's then use the abstract symbol
$\oplus$ to indicate any sort of binary operator. Now we can establish a
formal definition of idempotence \\

@@html:<font color = "#0d3db3">@@
- A /binary operation/ $\oplus$ is said to be *idempotent* on a set $S$ if
  $x \oplus x = x \,\,\text{for all}\,\, x \in S$
- An element $x$ of a set $S$ is said to be *idempotent* under a
  binary operator $\oplus$ if $x \oplus x = x$
@@html:</font>@@

If multiplication is the binary operator on the set of all counting
numbers $\mathbb{N}$ then what numbers of $\mathbb{N}$[fn:24] can we
call idempotent according to the definition? Well, only $0$ and $1$
are idempotent:

\begin{align*}
0 \cdot 0 &= 0 \\
1 \cdot 1 &= 1
\end{align*}

All other numbers ($x \gt 1$) give increasingly larger squares of
themselves, hence, $0$ and $1$ are idempotent, but the binary
operation of multiplication is not.[fn:25]

Now, let's consider something that came up in a [[https://math.stackexchange.com/][StackExchange
Mathematics]] discussion [[https://math.stackexchange.com/questions/155475/1-1-1-origin-of-this-convention][here]], which is tackling our issue of duplicates
in a set by asking, why is $\{1,1\} = \{1\}$? Below we have a slight
re-wording of the preferred, green-checked answer

@@html:<font color = "#0d3db3">@@
An unordered tuple $\{a_1,a_2,a_3,a_4\dots\}$ is defined as \\
\begin{align*}
\{x:x=a_1 \lor x=a_2 \lor x=a_3 \lor x=a_4 \lor\dots\}.
\end{align*}
By this convention,
\begin{align}
\{1,1\} = \{x:x=1 \lor x=1 \}
\end{align}
So by the /idempotency/ of $\lor$ we have (2) the same as $\{ x : x = 1
\}$, hence,
\begin{align*}
\{1,1\} = \{1\}
\end{align*}
@@html:</font>@@

Notice we are relying on the /logical-or/ binary operator being
idempotent for all $x$ in the set. Generally, an *unordered n-tuple*
is a set of the form $\{a_1,a_2,\ldots, a_n\dots\}$, although a /tuple/ is
usually meant to be /ordered/.[fn:26] Again, idempotency of two
identical sets is obvious when seen as Venn diagrams, but now we've
seen in exact language how they are idempotent.

By the way, /union/ and /logical or/ are complimentary ideas. Consider
this expression

\begin{align}
a \in X \cup Y \iff a \in X \lor a \in Y
\end{align}

What does that double-arrow in the middle mean? /If and only
if/. We'll go into $\iff$ in more exact detail later, but for now it
means @@html:<font color = "#0d3db3">@@the truth of one side of the
$\iff$ requires the other side to be true also.@@html:</font>@@ So if
$a$ is an element of the union of $X$ and $Y$ then $a$ must be an
element of $X$ *or* it is an element of $Y$ *or* it is an element of
/both/ $X$ and $Y$ ---and the other way around as well. Note: we avoid
writing $X \lor Y$ when considering just the sets without involving the
elements therein.

** Summing up; data and data structures

We didn't even get off the first page of TLS, but we have laid some of
the groundwork we'll need to proceed. And we can't emphasize this
enough: Computer science is a branch of applied mathematics, and we
need to get the math going alongside, parallel to the computer
stuff. So expect more new math. Yes, this sort of math takes
concentrated, deliberate thinking. We're becoming philosophers, i.e.,
we're going beyond "plug-and-chug" math.

Next, lists. While this lesson began our introduction to /lists/,
we'll learn more about how they are a very simple but important data
structure in computer /data management/ ... but then we're using the
term /data management/ differently then the greater lay world does. So
a quick word about the whole concept of /data/ and /data structures/
before we really dive in ahead. Today the term /data/ is mainly
understood to be gobs and gobs of stuff held in databases or other
storage schemes. That's not what we mean by data. For us "data" can
simply be a number returned from an algorithm. That is to say, data is
what the programming logic, the "code" is taking in, working on, then
giving back to us. Yes, of course, this production of data can pool
and amass into great piles in vast electronic storage bins, but, for
instance, this is data

#+name: 6ce99fb1-93d3-4a72-9e01-5d9b96f3c682
#+begin_src scheme :eval never :exports code
'(bad bad so-so so-so good)
#+end_src

i.e., just a simple list surrounded in parentheses and prefaced by a
quotation mark ("'") at the beginning as is the custom in Scheme (and
Lisp). That quote at the opening parenthesis indicates this is not
code, rather, data. What we saw above

#+name: e4667fd4-1f04-4d95-ac36-ee0ee01b44ca
#+begin_src scheme :eval never :exports code
(define week3 '((bad bad so-so so-so good))
#+end_src

is therefore a mixture of both code and data. As we progress we'll get
into the weeds on just how this mixture of code and data can work
together.

#+INCLUDE: "./footer.org" :minlevel 1

* Footnotes

[fn:1] Βιγ Σξηεμερ: Big Schemer; Λιττλε Σξηεμερ: Little Schemer in
Greek letters.

[fn:2] Go [[https://en.wikipedia.org/wiki/Formalism_(philosophy_of_mathematics)][here]] to see the Wikipedia discussion about mathematic
formalism---although it's a bit formal...

[fn:3] Despite containing actual Scheme programs, i.e., real code, TLS
was written so that a layperson could follow along with no access to
nor knowledge of computers, e.g., someone from the nineteenth century
such as [[https://en.wikipedia.org/wiki/Ada_Lovelace][Ada Lovelace]]!

[fn:4] For example the (in)famous /[[https://en.wikipedia.org/wiki/Pons_asinorum][pons asinorum]]/ in /Euclid's
Elements/ \\
[[file:images/Byrne_pons_asinorum.jpg]] \\
where it is /proven/ that indeed the angles opposite the equal sides
of an isosceles triangle are themselves equal.

[fn:5] In mathematical logic the idea of /implication/ is very
fundamental. Something /implies/ something else; because $A$, that
means $B$ as well. Implication goes by many names: /[[https://en.wikipedia.org/wiki/Material_conditional][material
conditional]]/, [[https://en.wikipedia.org/wiki/Modus_ponens][modus ponens]], [[https://en.wikipedia.org/wiki/Logical_consequence][logical consequence]]. We first see
implication in programming with the basic /if-then-else/ conditional
starting with our third chapter.

[fn:6] /Higher math/ in the U.S. typically means those college math
courses pursued in the junior and senior year of a Bachelors math
degree, i.e., those courses /after/ Calculus, Differential Equations,
and Linear Algebra.

[fn:7] These axioms relate to Linear Algebra.

[fn:8] ... /quod erat demonstrandum/, meaning "that which was to be
demonstrated".

[fn:9] Go ahead and take a "math holiday" by touring [[http://aleph0.clarku.edu/~djoyce/elements/bookI/cn.html][this page]] by
Professor Joyce. He is speaking from a quasi-[[https://en.wikipedia.org/wiki/Set_theory][set theory]] standpoint,
i.e., the basis of modern high math. But remember, Euclid was talking
strictly about geometric shapes. Set theory had not been invented
yet...

[fn:10] ...if we could, would each program we write technically be a
new *theorem*? More on that later. Specifically, we'll look into
Douglas Hofstadter's [[https://en.wikipedia.org/wiki/MU_puzzle][MU puzzle]] from his ground-breaking book [[https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach][Gödel,
Escher, Bach]] (1979).

[fn:11] ...containing or including many items.

[fn:12] ...although it may be veiled or only partially explored.

[fn:13] We indicate the cardinality of a set $A$ by surrounding it
with vertical pipes: $|\,A\,|$ This is similar to the idea of a
number's /absolute value/ which uses the same vertical bar symbols.

[fn:14] 𝖟𝕭 is German for /zum Beispiel/ or /for example/.

[fn:15] ...paying double membership fees?

[fn:16]  Notice once again the nested parentheses. To be sure,
everything in Scheme is a list.

[fn:17] A Venn diagram of two sets /or/-ed, /union/-ed together. \\
[[file:images/VennUnion.png]] \\
The lens-shaped center area represents the "overlap," i.e., what the
two sets represented as circles have in common.

[fn:18] $\cup$ is the symbol for union.

[fn:19] Could we have said, ...in $A$ *and* in $B$ *and* in both $A$
and $B$? Better not. More on why later.

[fn:20] (1) can be expanded for the union of more sets than just
two, e.g., $A \cup B \cup C \cup \ldots$.

[fn:21] The symbol $\in$ means "in" or "member of."

[fn:22] $\lor$ is the symbol for /[[https://en.wikipedia.org/wiki/Logical_disjunction][logical or]]/, aka /logical
disjunction/. Take a crack at the Wikipedia article.

[fn:23] A *singleton* (also known as a *unit set* or *one-point set*)
is a set with exactly one element.

[fn:24] $\mathbb{N}$ is the symbol for the /natural/ numbers, i.e., the
positive integers $1$, $2$, $3\ldots$ we use to count things.

[fn:25] In her 2023 layman's book /The Joy of Abstraction/
mathematician Eugenia Cheng notes how the operation of mixing paint
colors is basically idempotent. Why? If we add one paint to one other
paint we always get just one new paint color. That is, there is never
an additive or multiplicative increasing or intensifying, just a new
color.

[fn:26] ...such as, e.g., a pair of /Cartesian coordinates/ $(a,b)$
where $a$ is some real number on the /x-axis/ and $b$ is a real number
on the /y-axis/. Obviously, with a Cartesian coordinate system $(a,b)
\neq (b,a)$, since they'd be entirely different points on the plane. The
only exception would be if $a = b$.
